% Generated by roxygen2 (4.0.1): do not edit by hand
\docType{package}
\name{simpleCache}
\alias{simpleCache}
\alias{simpleCache-package}
\title{Provides intuitive functions for caching R objects, encouraging faster reproducible and restartable R analysis}
\usage{
simpleCache(cacheName, instruction = NULL, buildEnvir = NULL,
  reload = FALSE, recreate = FALSE, noload = FALSE,
  cacheDir = getOption("RCACHE.DIR"), cacheSubDir = NULL,
  buildDir = getOption("RBUILD.DIR"), assignToVariable = NULL,
  loadEnvir = globalenv())
}
\arguments{
\item{recreate}{forces reconstruction of the cache}

\item{reload}{forces re-loading the cache, even if it exists in the env.}

\item{noload}{noload is useful for: you want to create the caches, but not load them if they aren't there (like a cache creation loop).}
}
\description{
simpleCache provides a function (simpleCache())

Given an R object with a unique name, and instructions for how to make
that object, use the simpleCache function to cache the object.
This should be used for computations that take a long time and generate
a table or something used repeatedly (in other scripts, for example).
Because it is tied to the object name, there is some danger of causing troubles
if you misuse the caching system. The object should be considered static.
You can pass R code that creates the object either as a string to
the "instruction" parameter (if the code is short), or you can put an R
script called object.R in the RBUILD.DIR (the name of the file *must* match
the name of the object it creates *exactly*). If you don't provide instruction,
the function sources RBUILD.DIR/object.R and caches the result as the object.
This source file *must* create an object with the same name of the object.
If you already have an object with the name of the object to load in your
current environment, this function will not try to reload the object; instead,
it returns the local object.
}
\details{
In essence, it assumes that this is a static object, which you will not change.
You can force it to load the cached version instead with "reload"
Because R uses lexical scoping and not dynamic scoping...
because of lexical scope, you may need to pass some environment variables you use in your instruction (function call). You can use this using the parameter env (just provide a list of named variables).
}
\author{
Nathan Sheffield
}
\references{
' \url{http://github.com/sheffield}
}

